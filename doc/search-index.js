var searchIndex = new Map(JSON.parse('[\
["rustls_cng",{"t":"PPICCCCCFNNNNNNNNNNNNNNNNNNGPPPNNNNNNNNNNNNNNNNNGPPFPPPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNFGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Err","Ok","Result","cert","error","key","signer","store","CertContext","acquire_key","as_chain_der","as_der","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","inner","into","new_borrowed","new_owned","to_owned","try_from","try_into","type_id","CngError","InvalidHashLength","UnsupportedKeyAlgorithmGroup","WindowsError","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","fmt","from","from_hresult","from_win32_error","into","to_owned","to_string","try_from","try_into","type_id","AlgorithmGroup","Ecdh","Ecdsa","NCryptKey","None","Pkcs1","Pss","Rsa","SignaturePadding","algorithm","algorithm_group","bits","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","eq","eq","fmt","fmt","fmt","from","from","from","from_str","inner","into","into","into","new_borrowed","new_owned","partial_cmp","partial_cmp","set_pin","sign","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","CngSigningKey","algorithm","algorithm_group","bits","borrow","borrow_mut","choose_scheme","fmt","from","into","key","new","supported_schemes","try_from","try_into","type_id","CertStore","CertStoreType","CurrentService","CurrentUser","LocalMachine","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","clone_to_uninit","drop","eq","find_all","find_by_issuer_name","find_by_issuer_str","find_by_sha1","find_by_subject_name","find_by_subject_str","fmt","fmt","from","from","from_pkcs12","inner","into","into","open","partial_cmp","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"rustls_cng"],[8,"rustls_cng::cert"],[27,"rustls_cng::error"],[48,"rustls_cng::key"],[107,"rustls_cng::signer"],[123,"rustls_cng::store"],[161,"alloc::vec"],[162,"core::fmt"],[163,"windows_sys::Win32::Security::Cryptography"],[164,"core::result"],[165,"core::any"],[166,"windows_sys::core"],[167,"alloc::string"],[168,"core::cmp"],[169,"core::option"],[170,"rustls::enums"],[171,"rustls::crypto::signer"],[172,"alloc::boxed"],[173,"core::convert"]],"i":[4,4,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,19,19,0,21,21,21,19,0,3,3,3,19,21,3,19,21,3,19,21,3,19,21,3,19,21,21,3,19,21,19,21,3,19,21,3,19,3,19,21,3,3,3,19,21,3,3,19,21,3,19,21,3,19,21,3,19,21,3,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,31,31,31,31,32,31,32,31,31,31,31,32,31,32,32,32,32,32,32,31,32,31,32,32,32,31,32,32,31,31,31,32,31,32,31,32],"f":"`````````{{{d{b}}}{{h{f}}}}{{{d{b}}}{{h{{l{{l{j}}}}}}}}{{{d{b}}}{{d{{n{j}}}}}}{{{d{c}}}{{d{e}}}{}{}}{{{d{A`c}}}{{d{A`e}}}{}{}}{{{d{b}}}b}{{{d{c}}{d{A`e}}}Ab{}{}}{{{d{c}}}Ab{}}{{{d{b}}{d{A`Ad}}}Af}{cc{}}{{{d{b}}}{{d{Ah}}}}{ce{}{}}{Ahb}0{{{d{c}}}e{}{}}{c{{Aj{e}}}{}{}}0{{{d{c}}}Al{}}````<;{{{d{An}}}An}:9{{{d{An}}{d{An}}}B`}{{{d{An}}{d{A`Ad}}}Af}09{Bb{{h{Ab}}}}{{}An}97{{{d{c}}}Bd{}}776`````````{{{d{f}}}{{h{Bd}}}}{{{d{f}}}{{h{Bf}}}}{{{d{f}}}{{h{Bh}}}}{{{d{c}}}{{d{e}}}{}{}}00{{{d{A`c}}}{{d{A`e}}}{}{}}00{{{d{Bf}}}Bf}{{{d{Bj}}}Bj}{{{d{f}}}f}{{{d{c}}{d{A`e}}}Ab{}{}}00{{{d{c}}}Ab{}}000{{{d{Bf}}{d{Bf}}}B`}{{{d{Bj}}{d{Bj}}}B`}{{{d{Bf}}{d{A`Ad}}}Af}{{{d{Bj}}{d{A`Ad}}}Af}{{{d{f}}{d{A`Ad}}}Af}{cc{}}00{{{d{Bl}}}{{h{Bf}}}}{{{d{f}}}Bn}{ce{}{}}00{Bnf}0{{{d{Bf}}{d{Bf}}}{{Cb{C`}}}}{{{d{Bj}}{d{Bj}}}{{Cb{C`}}}}{{{d{f}}{d{Bl}}}{{h{Ab}}}}{{{d{f}}{d{{n{j}}}}Bj}{{h{{l{j}}}}}}{{{d{c}}}e{}{}}00{c{{Aj{e}}}{}{}}00000{{{d{c}}}Al{}}00`{{{d{Cd}}}Cf}{{{d{Cd}}}{{d{Bf}}}}{{{d{Cd}}}Bh}{{{d{c}}}{{d{e}}}{}{}}{{{d{A`c}}}{{d{A`e}}}{}{}}{{{d{Cd}}{d{{n{Ch}}}}}{{Cb{{Cl{Cj}}}}}}{{{d{Cd}}{d{A`Ad}}}Af}{cc{}}{ce{}{}}{{{d{Cd}}}{{d{f}}}}{f{{h{Cd}}}}{{{d{Cd}}}{{d{{n{Ch}}}}}}==<`````8877{{{d{Cn}}}Cn}{{{d{c}}{d{A`e}}}Ab{}{}}{{{d{c}}}Ab{}}0{{{d{A`D`}}}Ab}{{{d{Cn}}{d{Cn}}}B`}{{{d{D`}}}{{h{{l{b}}}}}}{{{d{D`}}c}{{h{{l{b}}}}}{{Db{Bl}}}}0{{{d{D`}}c}{{h{{l{b}}}}}{{Db{{n{j}}}}}}11{{{d{Cn}}{d{A`Ad}}}Af}{{{d{D`}}{d{A`Ad}}}Af}>>{{{d{{n{j}}}}{d{Bl}}}{{h{D`}}}}{{{d{D`}}}Dd}??{{Cn{d{Bl}}}{{h{D`}}}}{{{d{Cn}}{d{Cn}}}{{Cb{C`}}}}{{{d{c}}}e{}{}}{c{{Aj{e}}}{}{}}000{{{d{c}}}Al{}}0","D":"Gh","p":[[5,"CertContext",8],[1,"reference"],[5,"NCryptKey",48],[8,"Result",0],[1,"u8"],[5,"Vec",161],[1,"slice"],[0,"mut"],[1,"unit"],[5,"Formatter",162],[8,"Result",162],[5,"CERT_CONTEXT",163],[6,"Result",164],[5,"TypeId",165],[6,"CngError",27],[1,"bool"],[8,"HRESULT",166],[5,"String",167],[6,"AlgorithmGroup",48],[1,"u32"],[6,"SignaturePadding",48],[1,"str"],[8,"NCRYPT_KEY_HANDLE",163],[6,"Ordering",168],[6,"Option",169],[5,"CngSigningKey",107],[6,"SignatureAlgorithm",170],[6,"SignatureScheme",170],[10,"Signer",171],[5,"Box",172],[6,"CertStoreType",123],[5,"CertStore",123],[10,"AsRef",173],[8,"HCERTSTORE",163]],"r":[],"b":[[37,"impl-Display-for-CngError"],[38,"impl-Debug-for-CngError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAGUAEgADAAAADQAFABgAAwAdAAoAKQABACwABAAyAAEANQADAD0AFABVAAAAXAABAGAACwBtAAAAcAADAHkAAgB+AAwAkQABAJoABwA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
